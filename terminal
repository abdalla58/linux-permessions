package com.company;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Scanner;
import java.util.Vector;

public class Main {

    public static class Parser{
        Main.Terminal terminal=new Main.Terminal();
        public boolean parse(String[] input) throws IOException {
            boolean p=true;
            if (input[0].equals("pwd")){
                System.out.println(terminal.pwd());
                return p;
            }else if(input[0].equals("echo")){
                terminal.echo(input);
                return p;
            }else if(input[0].equals("ls-r")){
                terminal.lsr();
                return p;
            }else if(input[0].equals("ls")){
                terminal.ls();
                return p;
            }else if(input[0].equals("mkdir")){
                terminal.mkdir(input[1]);
                return p;
            }else if(input[0].equals("rmdir")){
                terminal.rmdir(input[1]);
                return p;
            }else if(input[0].equals("cd")){
                terminal.cd(input[1]);
                return p;
            }else if(input[0].equals("touch")){
                terminal.touch(input[1]);
                return p;
            }else if(input[0].equals("cp")){
                terminal.cp(input[1],input[2]);
                return p;
            }else if(input[0].equals("cp-r")){
                terminal.cpr(input[1],input[2]);
                return p;
            }else if(input[0].equals("rm")){
                terminal.rm(input[1]);
                return p;
            }else if(input[0].equals("cat")){
                terminal.cat(input);
                return p;
            }else{
                p=false;
            }
            return p;
        }
    }
    public static class Terminal {
        Parser parser;
        BufferedWriter writing;
        String file="C:\\HP";
        File obj = new File(file);
        public void echo(String[] arg){
            for (int i =1;i<arg.length;i++){
                if (i==arg.length-1){
                    System.out.println(arg[i]);
                }else{
                    System.out.print(arg[i]+" ");
                }
            }
        }
        public String pwd(){
            return obj.getPath();
        }
        public void  ls(){
            String[] List_of_Directories = obj.list ( );
            for (String list_of_directory : List_of_Directories) {
                System.out.println(list_of_directory);
            }
        }
        public void lsr(){
            Vector<String>vector=new Vector<>();
            String[] list=obj.list();
            for (String s: list){
                String dir= s;
                vector.add(dir);
            }
            for (int i=vector.size()-1;i>=0;i--){
                System.out.println(vector.get(i));
            }
        }
        public void mkdir(String args){
            String [] a;
            a= args.split(":");
            if (a[0].equalsIgnoreCase("c")||a[0].equalsIgnoreCase("d")||a[0].equalsIgnoreCase("e")){
                File theDir = new File(args);
                if (!theDir.exists()){
                    theDir.mkdirs();
                }
            }else{
                File theDir = new File(file +"\\"+args);
                if (!theDir.exists()){
                    theDir.mkdirs();
                }
            }
        }
        public void rmdir(String args){
            String [] a;
            a= args.split(":");
            if (a[0].equalsIgnoreCase("c")||a[0].equalsIgnoreCase("d")||a[0].equalsIgnoreCase("e")){
                File theDir = new File(args);
                if (theDir.exists()){
                    theDir.delete();
                }
            }else if (a[0].equals("*")){
                File Path = new File (file);
                String[] s = Path.list();
                for (int i=0;i<s.length;i++){
                    Path=new File(file+"\\"+s[i]);
                        if (Path.exists()){
                            Path.delete();
                        }
                }
            }else{
                File theDir=new File(file+"\\"+args);
                if (theDir.exists()){
                    theDir.delete();
                }
            }
        }
        public void touch(String args){
            String [] a;
            a= args.split(":");
            if (a[0].equalsIgnoreCase("c")||a[0].equalsIgnoreCase("d")||a[0].equalsIgnoreCase("e")){
                File theDir = new File(args);
                try {
                    theDir.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }else{
                File theDir = new File(file +"\\"+args);
                try {
                    theDir.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        public void cat(String[] args) throws FileNotFoundException {
            if (args.length==2){
                File myObj=new File(file+"\\"+args[1]);
                Scanner MyReader = new Scanner ( myObj );
                while ( MyReader.hasNextLine ( ) ) {
                    String info = MyReader.nextLine ( );
                    System.out.println(info);
                }
            }else if (args.length>2){
                File myObj =new File(file+"\\"+args[1]);
                Scanner MyReader = new Scanner ( myObj );
                while ( MyReader.hasNextLine ( ) ) {
                    String info = MyReader.nextLine ( );
                    System.out.println(info);
                }
                File myObj2 =new File(file+"\\"+args[2]);
                Scanner MyReader2 = new Scanner ( myObj2 );
                while ( MyReader2.hasNextLine ( ) ) {
                    String info = MyReader2.nextLine ( );
                    System.out.println(info);
                }
            }

        }public void cpr(String a1,String a2){
            File myobj=new File(file+"\\"+a1);
            File myobj2=new File(file+"\\"+a2);
            String[] List_of_Directories = myobj.list ( );
            for (String list_of_directory : List_of_Directories) {
                File theDir = new File(myobj2+"\\"+list_of_directory);
                if (!theDir.exists()){
                    theDir.mkdirs();
                }
            }
        }
        public void cp(String a1,String a2) throws IOException {
            File myobj=new File(file+"\\"+a1);
            FileOutputStream fos=new FileOutputStream(file+"\\"+a2);
            writing=new BufferedWriter(new OutputStreamWriter(fos));
            Scanner reading=new Scanner(myobj);
            while (reading.hasNextLine()){
                String info=reading.nextLine();
                writing.write(info);
                writing.newLine();
            }
            writing.close();
            reading.close();
        }
        public void rm(String a){
            File myObj = new File(file+"\\"+a);
            if (myObj.delete()) {
            }
        }
        public void cd(String args){
            String []a;
            a=args.split(":");
            if (args.equals("..")){
                obj=obj.getParentFile();
                file=obj.getPath();
            }
            else if (a[0].equalsIgnoreCase("c")||a[0].equalsIgnoreCase("d")||a[0].equalsIgnoreCase("e")){
                file=args;
                obj=new File(args);
                file=obj.getPath();
            }
            else {
                file+="\\"+args;
                obj=new File(file);
            }
        }
    }

    public static void main(String[] args) throws IOException {
        Scanner input=new Scanner(System.in);
        Terminal t1=new Terminal();
        String[] inp;String a;
        Parser parser = new Parser();
        while (true){
            a=input.nextLine();
            inp=a.split(" ");
            if (parser.parse(inp)){

            }else if (inp[0].equalsIgnoreCase("exit")){
                break;
            }else{
                System.out.println("Error: Command not found r invalid parameters are entered!");
            }
        }
    }
}
